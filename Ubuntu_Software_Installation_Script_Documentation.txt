
# Ubuntu Software Installation Script Documentation

This document outlines a shell script designed to automate the installation of various software packages on an Ubuntu system. The script performs system updates, installs essential development tools, and verifies the installations.

## Script Breakdown

### 1. Update and Upgrade System
```bash
# Update the package list and upgrade installed packages
echo "Updating package list and upgrading installed packages..."
sudo apt update && sudo apt upgrade -y
```
This section ensures that the system's package list is up-to-date and upgrades any already installed packages.

### 2. Install Essential Software
```bash
# Install essential software packages
echo "Installing vim, snapd, and docker..."
sudo apt install -y vim snapd docker.io
```
This command installs `vim`, `snapd`, and `docker.io` which are fundamental tools for many development tasks.

### 3. Enable and Start Docker
```bash
# Enable and start Docker service
echo "Enabling and starting Docker service..."
sudo systemctl enable --now docker
```
This enables the Docker service and starts it immediately.

### 4. Install Visual Studio Code
```bash
# Install Visual Studio Code (vscode) via Snap
echo "Installing Visual Studio Code..."
sudo snap install --classic code
```
The script installs Visual Studio Code using the Snap package manager.

### 5. Install Terraform
```bash
# Install Terraform
echo "Installing Terraform..."
sudo apt install -y gnupg software-properties-common curl
curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
sudo apt update
sudo apt install -y terraform
```
Terraform is installed after adding HashiCorpâ€™s GPG key and repository to the system.

### 6. Install Python and pip
```bash
# Install Python and pip
echo "Installing Python and pip..."
sudo apt install -y python3 python3-pip
```
This step installs Python 3 and its package manager pip.

### 7. Install Kubernetes Tools
```bash
# Install Kubernetes tools (kubectl)
echo "Installing kubectl..."
sudo apt install -y apt-transport-https ca-certificates curl
curl -fsSL https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo apt-add-repository "deb https://apt.kubernetes.io/ kubernetes-xenial main"
sudo apt update
sudo apt install -y kubectl
```
`kubectl`, the command-line tool for Kubernetes, is installed after adding the necessary repository.

### 8. Install Terragrunt
```bash
# Install Terragrunt
echo "Installing Terragrunt..."
wget https://github.com/gruntwork-io/terragrunt/releases/download/v0.50.4/terragrunt_linux_amd64
chmod +x terragrunt_linux_amd64
sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt
```
Terragrunt, a thin wrapper for Terraform, is downloaded and made executable.

### 9. Install Git
```bash
# Install Git
echo "Installing Git..."
sudo apt install -y git
```
The script installs Git, a version control system.

### 10. Install Helm
```bash
# Install Helm
echo "Installing Helm..."
curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
```
Helm, the package manager for Kubernetes, is installed using a provided script.

### 11. Install Java (OpenJDK 11)
```bash
# Install Java (OpenJDK 11)
echo "Installing Java (OpenJDK 11)..."
sudo apt install -y openjdk-11-jdk
```
OpenJDK 11 is installed for Java development.

### 12. Install Node.js and npm
```bash
# Install Node.js and npm for HTML/CSS/JS development
echo "Installing Node.js and npm..."
sudo apt install -y nodejs npm
```
Node.js and npm are installed for JavaScript development.

### 13. Install kind (Kubernetes in Docker)
```bash
# Install kind (Kubernetes in Docker)
echo "Installing kind..."
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.19.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/kind
```
`kind`, a tool for running Kubernetes clusters in Docker, is installed.

### 14. Verify Installations
```bash
# Verify installations (optional)
echo "Verifying installations..."
terraform -v
code --version
python3 --version
kubectl version --client
terragrunt --version
vim --version
git --version
helm version
java -version
node -v
npm -v
kind version
```
The script verifies that each installed software package is correctly installed by checking their versions.

## Usage Instructions

1. **Save the Script**: Save the script to a file, e.g., `install_software.sh`.

2. **Make the Script Executable**:
   ```bash
   chmod +x install_software.sh
   ```

3. **Run the Script**:
   ```bash
   ./install_software.sh
   ```

## Notes
- Ensure you have `sudo` privileges to install software and make system changes.
- The script includes verification steps to check the successful installation of each software package.
